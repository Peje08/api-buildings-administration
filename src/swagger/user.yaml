paths:
  /user/register:
    post:
      summary: Register a new user
      description: Registers a new user with name, email, and password.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'John'
                lastname:
                  type: string
                  example: 'Doe'
                email:
                  type: string
                  example: 'johndoe@example.com'
                password:
                  type: string
                  example: 'password123'
                cellularNumer:
                  type: string
                  example: '1234567890'
                type:
                  type: string
                  enum:
                    - SUPERUSER
                    - TENANT
                    - OWNER
                    - ADMINISTRATION
                  example: 'SUPERUSER'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  userId:
                    type: string
                  administrationId:
                    type: string
                    example: '64f9a5b7c2e4d3a9b8a0e1f3' # Only for ADMINISTRATION type users
        '400':
          description: User already registered
        '500':
          description: Error registering user

  /user/login:
    post:
      summary: User login
      description: Logs in a user and returns an access and refresh token.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'johndoe@example.com'
                password:
                  type: string
                  example: 'password123'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  userId:
                    type: string
                  administrationId:
                    type: string
                    example: '64f9a5b7c2e4d3a9b8a0e1f3' # Only for ADMINISTRATION type users
        '400':
          description: Invalid credentials or inactive user
        '500':
          description: Error logging in

  /user/refresh-token:
    post:
      summary: Refresh the access token
      description: Refresh the access token using the refresh token.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: 'your_refresh_token_here'
      responses:
        '200':
          description: New access token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Invalid or missing refresh token
        '500':
          description: Error refreshing token

  /user/deactivate/{userId}:
    put:
      summary: Deactivate a user (soft delete)
      description: Deactivates a user by setting the isActive flag to false.
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: '64f9a5b7c2e4d3a9b8a0e1f4'
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User deactivated successfully'
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: '64f9a5b7c2e4d3a9b8a0e1f4'
                      isActive:
                        type: boolean
                        example: false
        '404':
          description: User not found
        '500':
          description: Error deactivating user

  /user/reactivate/{userId}:
    put:
      summary: Reactivate a user
      description: Reactivates a user by setting the isActive flag to true.
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: '64f9a5b7c2e4d3a9b8a0e1f4'
      responses:
        '200':
          description: User reactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User reactivated successfully'
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: '64f9a5b7c2e4d3a9b8a0e1f4'
                      isActive:
                        type: boolean
                        example: true
        '404':
          description: User not found
        '500':
          description: Error reactivating user
  /user/edit/{userId}:
    put:
      summary: Edit user details
      description: Allows a user to edit their details, including username, password, and cellular number.
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: '64f9a5b7c2e4d3a9b8a0e1f4'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'new_username'
                oldPassword:
                  type: string
                  example: 'oldPassword123'
                newPassword:
                  type: string
                  example: 'newPassword456'
                cellularNumber:
                  type: string
                  example: '0987654321'
      responses:
        '200':
          description: User edited successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User edited successfully'
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: '64f9a5b7c2e4d3a9b8a0e1f4'
                      username:
                        type: string
                        example: 'new_username'
                      cellularNumber:
                        type: string
                        example: '0987654321'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid credentials.'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
        '500':
          description: Error editing user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error editing user'
                  error:
                    type: object

  /user/{id}:
    get:
      summary: Get user by ID
      description: Retrieves a user's details by their ID.
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: '64f9a5b7c2e4d3a9b8a0e1f4'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: '64f9a5b7c2e4d3a9b8a0e1f4'
                  username:
                    type: string
                    example: 'JohnDoe'
                  email:
                    type: string
                    example: 'johndoe@example.com'
                  cellularNumber:
                    type: string
                    example: '1234567890'
                  type:
                    type: string
                    example: 'TENANT'
                  isActive:
                    type: boolean
                    example: true
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
        '500':
          description: Error retrieving user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error retrieving user'
                  error:
                    type: object
